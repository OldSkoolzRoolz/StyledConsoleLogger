


using Microsoft.Extensions.Logging;

namespace KC.Apps.StyledLogger
{


    /// <summary>
    /// Here is an example of using the LoggerMessage Attribute for faster structured logging.
    /// There are many different applications where this might come in handy besides Exception handling.
    /// For an example you can use the logging levels as a reporting level of sorts. In combination with 
    /// logger message preconfigured methods you may send the sales department orders generated by event name
    /// and/or psuedo loglevels.
    /// NOTE: Currently .Net 8-prev-7 params type is not valid as a parameter. It is on the TODO list but unclear 
    /// if it will make it to Release. Info on Github issues for dotnet.
    /// The ILogger instance can be passed in as a parameter or it can be used like an extension method
    /// </summary>
    public static partial class LoggerMessages
    {

        [LoggerMessage(EventId = 11,
        EventName = "InternalEventName",
        Message = "There has been an application error: {message}")]
        public static partial void ApplicationInfo(this ILogger logger, LogLevel logLevel, string message);



        [LoggerMessage(Level= LogLevel.Debug,
        EventName = "OrderWasPlaced",
            Message = "An order {OrderNumber} of {OrderDescription} was purchased.")]
        public static partial void OrderDetails(this ILogger logger, int OrderNumber, string OrderDescription);



    }
}